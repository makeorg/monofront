image: makeorg/docker-arch-docker:latest

variables: &global_variables
  YARN_VERSION: "3.2.3"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ~/.cache
    - node_modules

.weblate-user: &weblate-user
  variables:
    - $GITLAB_USER_LOGIN == "weblate"

enable_merge:
  stage: weblate
  only:
    refs:
      - merge_requests
    <<: *weblate-user
  script:
    - echo "This is fine"

.exclude-weblate: &exclude_weblate
  except:
    <<: *weblate-user

stages:
  - weblate
  - check
  - build
  - deploy
  - merge

# Environments
.preprod:
  environment: preproduction
  only:
    refs:
      - preproduction

.prod:
  environment: production
  only:
    refs:
      - production
  when: manual
  allow_failure: false

# Applications
.front:
  variables:
    IMAGE_NAME: make-front
    IMAGE_APP_TARGET: app-production
    IMAGE_APP_PATH: apps/front/Dockerfile
    RUNDECK_JOB_ID: $RUNDECK_FRONT_JOB_ID
  only:
    changes:
      - .gitlab-ci.yml
      - package/**/*
      - apps/front/**/*
      - cypress/integration/*.feature
      - cypress/integration/common/*.feature
      - cypress/integration/front/*.feature
      - cypress/support/**
      - package.json
      - yarn.lock

.widget:
  variables:
    IMAGE_NAME: make-widget
    IMAGE_APP_TARGET: widget-production
    IMAGE_APP_PATH: apps/widget/Dockerfile
    RUNDECK_JOB_ID: $RUNDECK_WIDGET_JOB_ID
  only:
    changes:
      - .gitlab-ci.yml
      - package/**/*
      - apps/widget/**/*
      - cypress/integration/*.feature
      - cypress/integration/common/*.feature
      - cypress/integration/widget/*.feature
      - cypress/support/**
      - package.json
      - yarn.lock

.translator:
  variables:
    IMAGE_NAME: translator
    IMAGE_APP_TARGET: app-production
    IMAGE_APP_PATH: apps/translator/Dockerfile
    RUNDECK_JOB_ID: $RUNDECK_TRANSLATOR_JOB_ID
  only:
    changes:
      - .gitlab-ci.yml
      - package/**/*
      - apps/translator/**/*
      - package.json
      - yarn.lock

.content:
  variables:
    IMAGE_NAME: content
    IMAGE_APP_TARGET: app-production
    IMAGE_APP_PATH: apps/content/Dockerfile
    RUNDECK_JOB_ID: $RUNDECK_CONTENT_JOB_ID
  only:
    changes:
      - .gitlab-ci.yml
      - package/**/*
      - apps/content/**/*
      - package.json
      - yarn.lock

# Stages
.check:
  stage: check
  only:
    refs:
      - preproduction
      - merge_request
  except:
    refs:
      - production
  <<: *exclude_weblate
  image: "node:18.17-alpine"
  before_script:
    - node -v
    - export YARN_VERSION="$YARN_VERSION"
    - corepack enable yarn
    - corepack prepare
    - yarn install
  cache: []

.build:
  stage: build
  only:
    refs:
      - preproduction
      - production
      - merge_request
  <<: *exclude_weblate
  tags:
    - docker
  before_script:
    - export IMAGE_VERSION=`git rev-parse --short=10 HEAD`
    - mkdir -p /var/lib/docker
    - mount -t tmpfs -o size=12G tmpfs /var/lib/docker
    - if [ ! -e /var/run/docker.sock ]; then DOCKER_DRIVER=overlay2 dockerd & fi
    - until docker ps; do echo "waiting for docker to be up..."; sleep 0.5; done
    - docker login "https://$NEXUS_URL" --username "$NEXUS_USER" --password "$NEXUS_PASSWORD"
  script:
    - echo $(docker pull $NEXUS_URL/$IMAGE_NAME:$IMAGE_VERSION)
    - >
      if [[ -z $(docker images -q $NEXUS_URL/$IMAGE_NAME:$IMAGE_VERSION) ]];then
        DOCKER_BUILDKIT=1 docker build --rm -f $IMAGE_APP_PATH -t $NEXUS_URL/$IMAGE_NAME:$IMAGE_VERSION --target $IMAGE_APP_TARGET .
        docker push $NEXUS_URL/$IMAGE_NAME:$IMAGE_VERSION
      fi
    - docker tag $NEXUS_URL/$IMAGE_NAME:$IMAGE_VERSION $NEXUS_URL/$IMAGE_NAME:$CI_COMMIT_REF_NAME-latest
    - docker push $NEXUS_URL/$IMAGE_NAME:$CI_COMMIT_REF_NAME-latest

.deploy:
  stage: deploy
  script:
    - >
      job_id=$(curl -s -X "POST" \
        -H "Accept: application/json" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -H "X-Rundeck-Auth-Token: ${RUNDECK_TOKEN}" \
        --data-urlencode "argString=-version $CI_COMMIT_REF_NAME-latest" \
        ${RUNDECK_URL}/api/16/job/${RUNDECK_JOB_ID}/run \
        | jq -r '.id')

      [[ "${job_id}" =~ ^[0-9]+$ ]] && echo "Job ${job_id} started ..." \
      || { echo "Rundeck Job is not correctly launched"; exit 1; };

      status='running';
      while [ "${status}" == 'running' ]; do
        status=$(curl -s -X "GET" \
          -H "Accept: application/json" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -H "X-Rundeck-Auth-Token: ${RUNDECK_TOKEN}" \
          ${RUNDECK_URL}/api/16/execution/${job_id} \
          | jq -r '.status');
        [ "${status}" == 'running' ] \
        && { echo -e "Job ${job_id} is still running ... \nWaiting 5s ..."; sleep 5; };
      done;

      [ "${status}" != 'succeeded' ] && { echo -e "Job ${job_id} has ${status}."; exit 2; };
      echo "Job ${job_id} has ${status}.";

.e2e:
  image: cypress/browsers:node-18.16.0-chrome-114.0.5735.133-1-ff-114.0.2-edge-114.0.1823.51-1
  variables:
    CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache_cypress"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - cypress/screenshots
      - cypress/videos
      - cypress/coverage

# Check
lint:
  extends: .check
  script:
    - yarn eslint ./

check-types:
  extends: .check
  script:
    - yarn tsc --noEmit

test:
  extends: .check
  script:
    - yarn jest --coverage
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - coverage

jscpd:
  extends: .check
  script:
    - yarn jscpd
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - reports

e2e-front:
  extends:
    - .check
    - .e2e
    - .front
  script:
    - yarn workspace @make.org/front build
    - yarn ci:cypress:front

e2e-widget:
  extends:
    - .check
    - .e2e
    - .widget
  script:
    - yarn workspace @make.org/widget build
    - yarn ci:cypress:widget

# Build
build-make-front:
  extends:
    - .build
    - .front

build-make-widget:
  extends:
    - .build
    - .widget

build-make-translator:
  extends:
    - .build
    - .translator

build-make-content:
  extends:
    - .build
    - .content

# Deploy
deploy-front-preproduction:
  extends:
    - .deploy
    - .front
    - .preprod

deploy-widget-preproduction:
  extends:
    - .deploy
    - .widget
    - .preprod

deploy-translator-preproduction:
  extends:
    - .deploy
    - .translator
    - .preprod

deploy-content-preproduction:
  extends:
    - .deploy
    - .content
    - .preprod

deploy-front-production:
  extends:
    - .deploy
    - .front
    - .prod

deploy-widget-production:
  extends:
    - .deploy
    - .widget
    - .prod

deploy-translator-production:
  extends:
    - .deploy
    - .translator
    - .prod

deploy-content-production:
  extends:
    - .deploy
    - .content
    - .prod

merge-to-prod:
  stage: merge
  when: manual
  only:
    - preproduction
  allow_failure: false
  script:
    - mkdir -p ~/.ssh/
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.com > ~/.ssh/known_hosts
    - echo "${DEPLOY_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - export CI_PUSH_REPO=`echo $CI_REPOSITORY_URL | perl -pe 's#.*@(.+?(\:\d+)?)/#git@\1:#'`
    - echo "Target repo is ${CI_PUSH_REPO}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git remote set-url origin "${CI_PUSH_REPO}"
    - git checkout production
    - git merge --ff-only origin/preproduction
    - git push origin production:production
